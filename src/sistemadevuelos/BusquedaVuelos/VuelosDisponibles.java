/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sistemadevuelos.BusquedaVuelos;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import sistemadevuelos.FondoPanel;
import sistemadevuelos.conexion.ConexionDB;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.SQLException;

public class VuelosDisponibles extends JFrame {

    private FondoPanel fondo3 = new FondoPanel();
  

     public VuelosDisponibles(String origen, String destino, String fechaDeIda, String fechaDeVuelta, String pasajeros) {
        this.setContentPane(fondo3);
        initComponents(); // No modificamos este método directamente
        this.setLocationRelativeTo(null); // Centrar el formulario en pantalla

        // Obtenemos el modelo existente de resultadosTable
        DefaultTableModel model = (DefaultTableModel) resultadosTable.getModel();

        // Llenar la tabla con los resultados de la búsqueda y verificar disponibilidad
        boolean vuelosDisponibles = llenarTabla(origen, destino, fechaDeIda, fechaDeVuelta, pasajeros, model);

        // Verificar si hay vuelos disponibles
        if (!vuelosDisponibles) {
            // Cerrar la ventana actual
            dispose();

            // Abrir la ventana de vuelos no disponibles
            VuelosNoDisponibles ventanaNoDisponibles = new VuelosNoDisponibles();
            ventanaNoDisponibles.setVisible(true);
        }
    }

    private boolean llenarTabla(String origen, String destino, String fechaDeIda, String fechaDeVuelta, String pasajeros, DefaultTableModel model) {
        String query = "SELECT Origen, Destino, FechaDeIda, FechaDeVuelta, CantidadDePasajeros, Precio, HorarioSalida, HorarioLlegada " +
                       "FROM vuelosdisponibles " +
                       "WHERE Origen = ? AND Destino = ? AND FechaDeIda = ? AND CantidadDePasajeros >= ?";

        ConexionDB conexionDB = new ConexionDB();

        try (Connection connection = (Connection) conexionDB.conectar();
             PreparedStatement statement = (PreparedStatement) connection.prepareStatement(query)) {

            statement.setString(1, origen);
            statement.setString(2, destino);
            statement.setString(3, fechaDeIda);
            statement.setInt(4, Integer.parseInt(pasajeros));

            ResultSet resultSet = statement.executeQuery();

            // Verificar si hay resultados en el ResultSet
            if (!resultSet.isBeforeFirst()) {
                // No hay resultados
                return false;
            }

            while (resultSet.next()) {
                String origenResult = resultSet.getString("Origen");
                String destinoResult = resultSet.getString("Destino");
                String fechaDeIdaResult = resultSet.getString("FechaDeIda");
                String fechaDeVueltaResult = resultSet.getString("FechaDeVuelta");
                int cantidadpasajerosResult = resultSet.getInt("CantidadDePasajeros");
                double precioResult = resultSet.getDouble("Precio");
                String horarioSalidaResult = resultSet.getString("HorarioSalida");
                String horarioLlegadaResult = resultSet.getString("HorarioLlegada");

                model.addRow(new Object[]{origenResult, destinoResult, fechaDeIdaResult, fechaDeVueltaResult, cantidadpasajerosResult, precioResult, horarioSalidaResult, horarioLlegadaResult});
            }

            return true; // Hay vuelos disponibles

        } catch (SQLException e) {
            e.printStackTrace();
            return false; // Error al ejecutar la consulta
        }
    }



    // Método para inicializar componentes (puedes personalizar según tu diseño)
    


   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new FondoPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultadosTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1260, 986));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1260, 986));

        jPanel1.setPreferredSize(new java.awt.Dimension(1260, 986));

        resultadosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Origen", "Destino", "Fecha de Ida", "Fecha de Vuelta", "Cantidad de pasajeros", "Precio", "Horario Salida", "Horario Llegada"
            }
        ));
        jScrollPane2.setViewportView(resultadosTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(146, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1013, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(441, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable resultadosTable;
    // End of variables declaration//GEN-END:variables
}
